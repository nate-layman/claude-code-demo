---
title: "Claude Code"
author: "Nate Layman"
format:
  revealjs:
    theme: white
    transition: slide
    transition-speed: default
    controls: true
    controls-layout: bottom-right
    controls-back-arrows: visible
    progress: true
    slide-number: true
    navigation-mode: linear
    self-contained: true
    embed-resources: true
    center: true
    menu: true
    include-after-body:
      text: |
        <style>
        .reveal .slide-number {
          top: 20px !important;
          bottom: auto !important;
        }
        .reveal .slide-menu-button {
          top: 20px !important;
          bottom: auto !important;
        }
        .github-corner {
          position: fixed;
          bottom: 20px;
          left: 20px;
          z-index: 100;
        }
        .github-corner a {
          display: block;
        }
        .github-corner svg {
          fill: #333;
          transition: fill 0.3s;
        }
        .github-corner a:hover svg {
          fill: #000;
        }
        </style>
        <div class="github-corner">
          <a href="https://github.com/nate-layman/claude-code-demo" target="_blank" aria-label="View source on GitHub">
            <svg width="32" height="32" viewBox="0 0 496 512" xmlns="http://www.w3.org/2000/svg">
              <path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/>
            </svg>
          </a>
        </div>
css: |
  .reveal .slides section {
    text-align: center;
  }
  .reveal .slides section .column {
    text-align: center;
  }
---

## Follow Along

[tinyurl.com/claudecodedemo](https://tinyurl.com/claudecodedemo)

---

## Agentic vs Non-Agentic AI

:::: {.columns}

::: {.column width="50%"}
### Non-Agentic
**Traditional AI Chat Interfaces**

- Response generation only
- No environment access
- Manual implementation required
- Text-based interaction
:::

::: {.column width="50%"}
### Agentic
**Environment-Integrated AI**

- Direct file system access
- Tool execution capabilities
- Automated task completion
- Code modification abilities
:::

::::



## What is Claude?

:::: {.columns}

::: {.column width="40%"}
**Anthropic's large language model**

- Advanced reasoning capabilities
- Long context windows (200K+ tokens)
- Multiple model tiers
- Strong coding abilities
:::

::: {.column width="60%"}
<div style="margin-left: 60px;">
![](https://cdn.prod.website-files.com/657639ebfb91510f45654149/67cef0f7d6ebd0d81121f867_667f3b32d7ee7888bfcf1545_AD_4nXe7CoZkHH9uApvO2rMu6l3-gfoO2zYXtZ9CYwGOKXy9uCb8qOzj7Oaz0ounkqHNn27xhOH4C_ORh-6JNUYXFHu1iDph9pU02pb6QxzIqNQY4scKAj_bpeCZnArp9KRsWVnot8jlMsj5B2puKpn-4TYuAIvi.webp){width=100%}
</div>
:::

::::



## Why Claude Code?

:::: {.columns}

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/tech_support_cheat_sheet.png)
:::

::: {.column width="60%"}
**Traditional AI Workflow:**

Copy code → Paste to ChatGPT → Copy solution → Test → Breaks → Repeat...

**Claude Code:**

Direct file access, full project context, automated execution

No more copy-paste. No more context loss.
:::

::::




## The Power of Multi-File Context

Traditional AI sees snippets. Claude Code sees your entire project:

- Understanding relationships between files
- Cross-file dependencies and imports
- Holistic refactoring across the codebase

**Example:** Rename a function used in 47 files across 12 modules - Claude Code updates everything consistently.



## Claude Code: Productivity Multiplier

**3x productivity gains with proper AI assistance**

- Refactor functions across 47 files in 5 minutes
- Full project context and multi-file awareness
- Automated test generation and documentation
- File organization, project maintenance, and housekeeping



## Terminal-Based Architecture

:::: {.columns}

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/workflow.png)
:::

::: {.column width="60%"}
- Works with any editor: VS Code, IntelliJ, Vim, Emacs
- Lightweight command-line interface
- No IDE-specific plugins required
- Preserves existing workflows
:::

::::



## What Claude Code Sees {.smaller}

:::: {.columns}

::: {.column width="50%"}
- **Full project context**
- **All source files**
- **Tests and documentation**
- **Configuration files**

### Security Benefits
- **Project-root bounded access**
- **No access to parent directories**
- **Focused, relevant assistance**
:::

::: {.column width="50%"}
<div style="font-size: 2em; text-align: left; margin-top: 120px;">
```
project-root/
├── src/         ← Can see
├── tests/       ← Can see
├── docs/        ← Can see
├── package.json ← Can see
└── ../other/    ← Outside
```
</div>
:::

::::



## GitHub Integration Made Simple

:::: {.columns}

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/git.png)
:::

::: {.column width="60%"}
*Alternative to "delete the project and download a fresh copy"*

**Git Operations:**
- Commit message generation
- Branch management
- Pull request creation
- Issue tracking integration
:::

::::



## Claude Code + GitHub Projects

**Powerful project management synergies:**

- Automate issue creation from code analysis
- Update project boards based on code changes
- Generate sprint summaries from PRs and issues
- Create technical tasks from high-level goals
- Keep documentation in sync with project status
- Interrogate commit history to recall what you were working on



## Claude Code Pricing

:::: {.columns}

::: {.column width="50%"}
### API Access
**Pay per token**

- $3-15 per million tokens
- Variable monthly costs
- Usage-dependent
:::

::: {.column width="50%"}
### Subscription
**Fixed monthly fee**

- Pro: $17-20/month
- Team: $150/person/month
- Predictable costs
:::

::::



## Installation Process

```bash
# Install via npm
npm install -g @anthropic/claude-code

# Authenticate
claude-code auth login

# Initialize in project directory
cd your-project
claude-code
```

Standard command-line installation and setup.



## Configuration & Customization

**CLAUDE.md Files**

Auto-loaded project instructions at repo root

- Bash commands and testing instructions
- Code style guidelines and repository etiquette
- Developer environment setup

**Terminal Settings**

- `/terminal-setup` - Configure Shift+Enter for multiline
- `/permissions` - Manage tool permissions
- `/output-style` - Change interaction style



## Interaction Modes

**Press Shift+Tab to cycle through three modes:**

**Default Mode**
Claude suggests changes and waits for your permission

**Auto-Accept Mode**
Claude executes changes autonomously without waiting

**Plan Mode**
Claude creates a comprehensive plan without making any changes
- Read-only research and analysis phase
- Review the plan before execution
- Accept with auto-edits or manual edits

**Press Escape to interrupt Claude at any time**



## Best Practices

**Recommended Workflow:**

1. **Define the end state** - Specify what success looks like
2. **Create verification** - Design tests that prove success
3. **Find the path** - Iteratively code until tests pass

**Optimization Tips**

- Be specific in instructions
- Course correct early
- Use `/clear` to manage context



## Gordon's Program

*From Douglas Adams' "Dirk Gently's Holistic Detective Agency"*

> "Gordon's great insight was to design a program which allowed you to specify in advance what decision you wished it to reach, and only then to give it all the facts. The program's task, which it was able to accomplish with consummate ease, was simply to construct a plausible series of logical-sounding steps to connect the premises with the conclusion."



## {.unlisted}

:::: {.columns}

::: {.column width="50%"}
### Traditional Coding
1. Write code
2. Run manually
3. Find bugs
4. Fix issues
5. Repeat
:::

::: {.column width="50%"}
### Test-Driven Development
1. Define expected outcome
2. Write tests first
3. **Iterate until tests pass**
:::

::::



## Why Working Backwards Works

**Similar to simulating data for power analysis:**

1. Start with your expected model
2. Generate data (or code) to fit the model
3. Refine the approach

::: {.fragment}
<div style="margin-top: 40px; font-size: 1.5em; font-weight: bold;">
Claude Code can do 2 and 3 for you!
</div>
:::



## Live Demo: File Organization

**What we'll demonstrate:**

1. Create new branch and switch to it
2. Create GitHub issue: "organize notes"
3. Use Claude Code to organize messy files
4. Commit changes with Claude Code
5. Push branch and open PR with Claude Code
6. Merge PR with Claude Code
